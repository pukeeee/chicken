import type { User, AuthState, PublicUser } from '~/types/auth'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authState = reactive<AuthState>({
  user: null,
  isAuthenticated: false,
  isLoading: false
})

export const useAuth = () => {
  const toast = useToast()

  // –ì–µ—Ç—Ç–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const user = computed(() => authState.user)
  const isAuthenticated = computed(() => authState.isAuthenticated)
  const isLoading = computed(() => authState.isLoading)

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
   */
  const isPhoneValid = (phone: string): boolean => {
    const phoneRegex = /^\+380\d{9}$/
    return phoneRegex.test(phone)
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  const isCodeValid = (code: string): boolean => {
    return code.length === 6 && /^[123456789ABCDEFGHJKLMNPQRSTUVWXYZ]{6}$/.test(code)
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  const formatPhone = (value: string): string => {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let digits = value.replace(/\D/g, '')
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 380, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (digits.startsWith('380')) {
      digits = '+' + digits
    }
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 80, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +380
    else if (digits.startsWith('80')) {
      digits = '+3' + digits
    }
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +380
    else if (digits.startsWith('0')) {
      digits = '+38' + digits
    }
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    else if (digits.length <= 9 && !digits.startsWith('380')) {
      digits = '+380' + digits
    }
    
    return digits.slice(0, 13) // –ú–∞–∫—Å–∏–º—É–º +380XXXXXXXXX
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   */
  const sendVerificationCode = async (phone: string): Promise<{ success: boolean; step?: string }> => {
    if (!isPhoneValid(phone)) {
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
        color: 'error'
      })
      return { success: false }
    }

    try {
      authState.isLoading = true
      
      const data = await $fetch('/api/users/verify', {
        method: 'POST',
        body: {phone}
      })
      
      toast.add({
        title: '–£—Å–ø—ñ—à–Ω–æ',
        description: `–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –Ω–æ–º–µ—Ä ${phone}`,
        color: 'success'
      })
      
      return { success: true, step: 'code' }
      
    } catch (error) {
      console.error('Error sending verification code:', error)
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        color: 'error'
      })
      return { success: false }
    } finally {
      authState.isLoading = false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const verifyCodeAndLogin = async (phone: string, code: string): Promise<{ success: boolean; user?: User }> => {
    if (!isCodeValid(code)) {
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ö–æ–¥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤',
        color: 'error'
      })
      return { success: false }
    }

    try {
      authState.isLoading = true

      const data = await $fetch('/api/users/login',{
        method: 'POST',
        body: {phone, code}
      })
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      authState.user = data.user
      authState.isAuthenticated = true
      
      toast.add({
        title: '–£—Å–ø—ñ—à–Ω–æ',
        description: '–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        color: 'success'
      })
      
      return { success: true }
      
    } catch (error) {
      console.error('Error verifying code:', error)
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
        color: 'error'
      })
      return { success: false }
    } finally {
      authState.isLoading = false
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = async (): Promise<void> => {
    try {
      authState.isLoading = true
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      authState.user = null
      authState.isAuthenticated = false
      
      console.log('üö™ User logged out')
      
      toast.add({
        title: '–£—Å–ø—ñ—à–Ω–æ',
        description: '–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏',
        color: 'success'
      })
      
    } catch (error) {
      console.error('Error during logout:', error)
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —Å–∏—Å—Ç–µ–º–∏',
        color: 'error'
      })
    } finally {
      authState.isLoading = false
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  const checkAuth = async (): Promise<void> => {
    // –ó–∞–≥–ª—É—à–∫–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    console.log('checkAuth called - stub implementation')
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const updateUser = async (userData: Partial<PublicUser>): Promise<PublicUser | null> => {
    if (!authState.user) {
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π',
        color: 'error'
      })
      return null
    }
    
    try {
      authState.isLoading = true
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
      const updatedUser: PublicUser = {
        ...authState.user,
        ...userData,
        // updatedAt: new Date().toISOString()
      }
      
      authState.user = updatedUser
      
      toast.add({
        title: '–£—Å–ø—ñ—à–Ω–æ',
        description: '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ',
        color: 'success'
      })
      
      return updatedUser
      
    } catch (error) {
      console.error('Error updating user:', error)
      toast.add({
        title: '–ü–æ–º–∏–ª–∫–∞',
        description: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
        color: 'error'
      })
      return null
    } finally {
      authState.isLoading = false
    }
  }

  return {
    // State
    user: readonly(user),
    isAuthenticated: readonly(isAuthenticated),
    isLoading: readonly(isLoading),
    
    // Validation helpers
    isPhoneValid,
    isCodeValid,
    formatPhone,
    
    // Actions
    sendVerificationCode,
    verifyCodeAndLogin,
    logout,
    checkAuth,
    updateUser
  }
}