// composables/useAuth.ts
interface User {
    id: number
    phone: string
    name?: string
    email?: string
    createdAt: string
    updatedAt: string
  }
  
  interface AuthState {
    user: User | null
    isAuthenticated: boolean
    isLoading: boolean
  }
  
  // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const authState = reactive<AuthState>({
    user: null,
    isAuthenticated: false,
    isLoading: false
  })
  
  export const useAuth = () => {
    const toast = useToast()
  
    // –ì–µ—Ç—Ç–µ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const user = computed(() => authState.user)
    const isAuthenticated = computed(() => authState.isAuthenticated)
    const isLoading = computed(() => authState.isLoading)
  
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     */
    const sendVerificationCode = async (phone: string): Promise<void> => {
      try {
        authState.isLoading = true
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        const code = Math.floor(1000 + Math.random() * 9000).toString()
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        // const response = await $fetch('/api/auth/send-code', {
        //   method: 'POST',
        //   body: { phone }
        // })
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`üîê Verification code for ${phone}: ${code}`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ localStorage –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
        if (process.client) {
          localStorage.setItem('verification_code', code)
          localStorage.setItem('verification_phone', phone)
          localStorage.setItem('code_sent_at', Date.now().toString())
        }
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000))
        
      } catch (error) {
        console.error('Error sending verification code:', error)
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
      } finally {
        authState.isLoading = false
      }
    }
  
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const verifyCodeAndLogin = async (phone: string, code: string): Promise<User> => {
      try {
        authState.isLoading = true
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏–∑ localStorage
        if (process.client) {
          const storedCode = localStorage.getItem('verification_code')
          const storedPhone = localStorage.getItem('verification_phone')
          const codeSentAt = localStorage.getItem('code_sent_at')
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –∏—Å—Ç–µ–∫ (5 –º–∏–Ω—É—Ç)
          const fiveMinutesAgo = Date.now() - (5 * 60 * 1000)
          if (codeSentAt && parseInt(codeSentAt) < fiveMinutesAgo) {
            throw new Error('–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–≤')
          }
          
          // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          if (code.length !== 4 || !/^\d{4}$/.test(code)) {
            throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
          }
          
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
          // const response = await $fetch('/api/auth/verify-code', {
          //   method: 'POST',
          //   body: { phone, code }
          // })
          
          // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const mockUser: User = {
            id: Math.floor(Math.random() * 1000000),
            phone: phone,
            name: `User ${phone.slice(-4)}`,
            email: `user${phone.slice(-4)}@example.com`,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          }
          
          // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
          await new Promise(resolve => setTimeout(resolve, 1500))
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          authState.user = mockUser
          authState.isAuthenticated = true
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (process.client) {
            localStorage.setItem('auth_user', JSON.stringify(mockUser))
            localStorage.setItem('auth_token', `mock_token_${mockUser.id}`)
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–¥–∞
            localStorage.removeItem('verification_code')
            localStorage.removeItem('verification_phone')
            localStorage.removeItem('code_sent_at')
          }
          
          return mockUser
        }
        
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–¥—É')
        
      } catch (error) {
        console.error('Error verifying code:', error)
        throw error instanceof Error ? error : new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
      } finally {
        authState.isLoading = false
      }
    }
  
    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    const logout = async (): Promise<void> => {
      try {
        authState.isLoading = true
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        // await $fetch('/api/auth/logout', { method: 'POST' })
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        authState.user = null
        authState.isAuthenticated = false
        
        // –û—á–∏—â–∞–µ–º localStorage
        if (process.client) {
          localStorage.removeItem('auth_user')
          localStorage.removeItem('auth_token')
        }
        
        toast.add({
          title: '–£—Å–ø—ñ—à–Ω–æ',
          description: '–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏',
          color: 'success'
        })
        
      } catch (error) {
        console.error('Error during logout:', error)
        toast.add({
          title: '–ü–æ–º–∏–ª–∫–∞',
          description: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ —Å–∏—Å—Ç–µ–º–∏',
          color: 'error'
        })
      } finally {
        authState.isLoading = false
      }
    }
  
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    const checkAuth = async (): Promise<void> => {
      if (!process.client) return
      
      try {
        authState.isLoading = true
        
        const storedUser = localStorage.getItem('auth_user')
        const storedToken = localStorage.getItem('auth_token')
        
        if (storedUser && storedToken) {
          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          // const response = await $fetch('/api/auth/verify-token', {
          //   headers: { Authorization: `Bearer ${storedToken}` }
          // })
          
          const user = JSON.parse(storedUser) as User
          authState.user = user
          authState.isAuthenticated = true
        }
        
      } catch (error) {
        console.error('Error checking auth:', error)
        // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('auth_user')
        localStorage.removeItem('auth_token')
      } finally {
        authState.isLoading = false
      }
    }
  
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    const updateUser = async (userData: Partial<User>): Promise<User> => {
      if (!authState.user) {
        throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π')
      }
      
      try {
        authState.isLoading = true
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å
        // const response = await $fetch(`/api/users/${authState.user.id}`, {
        //   method: 'PATCH',
        //   body: userData
        // })
        
        const updatedUser: User = {
          ...authState.user,
          ...userData,
          updatedAt: new Date().toISOString()
        }
        
        authState.user = updatedUser
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
        if (process.client) {
          localStorage.setItem('auth_user', JSON.stringify(updatedUser))
        }
        
        return updatedUser
        
      } catch (error) {
        console.error('Error updating user:', error)
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
      } finally {
        authState.isLoading = false
      }
    }
  
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (process.client) {
      checkAuth()
    }
  
    return {
      // State
      user: readonly(user),
      isAuthenticated: readonly(isAuthenticated),
      isLoading: readonly(isLoading),
      
      // Actions
      sendVerificationCode,
      verifyCodeAndLogin,
      logout,
      checkAuth,
      updateUser
    }
  }