import { codeService } from '~~/server/services/users/codeService'
import { authSchemas } from '~~/shared/validation/schemas'
import { validateBody, createValidationError } from '~~/server/utils/validation'

export default defineEventHandler(async (event) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Zod
    const validationResult = await validateBody(event, authSchemas.sendCode)

    if (!validationResult.success) {
      throw createValidationError(validationResult)
    }

    const { phone } = validationResult.data!

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    const code = await codeService.createAndStore(phone)
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ SMS-—Å–µ—Ä–≤–∏—Å–∞
    console.log(`üì± OTP code for ${phone}: ${code}`)

    return {
      success: true,
      message: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ'
    }
  } catch (err: any) {
    console.error('Verify API error:', err)
    
    if (err.statusCode) {
      throw err
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})