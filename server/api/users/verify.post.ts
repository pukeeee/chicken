import { codeService } from '~/server/services/users/codeService'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    const { phone } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phone || typeof phone !== 'string') {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+380\d{9}$/
    if (!phoneRegex.test(phone)) {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É'
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    const code = await codeService.createAndStore(phone)
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ SMS-—Å–µ—Ä–≤–∏—Å–∞
    console.log(`üì± OTP code for ${phone}: ${code}`)
    
    return {
      success: true,
      message: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ'
    }

  } catch (err: any) {
    console.error('Verify API error:', err)
    
    if (err.statusCode) {
      throw err
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})