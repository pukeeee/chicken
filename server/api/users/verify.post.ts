import { codeService } from '~~/server/services/users/codeService'
import { authSchemas, userSchemas, type UserVerifyResponse } from '~~/shared/validation/schemas'
import { validateBody, createValidationError } from '~~/server/utils/validation'

export default defineEventHandler(async (event) => {
  try {
    // –ö—Ä–æ–∫ 1: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    const validationResult = await validateBody(event, authSchemas.sendCode)

    if (!validationResult.success) {
      throw createValidationError(validationResult)
    }

    const { phone } = validationResult.data!

    // –ö—Ä–æ–∫ 2: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–¥—É
    const code = await codeService.createAndStore(phone)
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–≤ –±–∏ –≤–∏–∫–ª–∏–∫ SMS-—Å–µ—Ä–≤—ñ—Å—É
    // –î–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –ª–æ–≥—É—î–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    if (process.env.NODE_ENV === 'development') {
      console.log(`üì± OTP code for ${phone}: ${code}`)
    }

    // –ö—Ä–æ–∫ 3: –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const response: UserVerifyResponse = {
      success: true,
      message: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ',
    }

    return userSchemas.verifyResponse.parse(response)

  } catch (error) {
    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π errorHandler –ø–µ—Ä–µ—Ö–æ–ø–∏—Ç—å –ø–æ–º–∏–ª–∫—É
    throw error
  }
})
