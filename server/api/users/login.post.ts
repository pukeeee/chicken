import { codeService } from '~/server/services/users/codeService'
import { loginService } from '~/server/services/users/loginService'
import { createToken } from '~/server/utils/jwt'

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event)
    const { phone, code } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!phone || typeof phone !== 'string') {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      })
    }

    if (!code || typeof code !== 'string') {
      throw createError({
        statusCode: 400,
        statusMessage: '–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ codeService
    const isCodeValid = await codeService.verify(phone, code)
    
    if (!isCodeValid) {
      throw createError({
        statusCode: 400,
        statusMessage: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ loginService
    const user = await loginService.getOrCreateUser(phone)

    if (!user) {
      throw createError({
        statusCode: 500,
        statusMessage: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = createToken({ 
      id: user.id, 
      role: user.role || 'USER',
      phone: user.phone 
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
    await loginService.saveUserToken(user.id, token)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    setCookie(event, 'user_token', token, {
      httpOnly: true,
      secure: true,
      sameSite: 'strict',
      maxAge: 60 * 60 * 24 * 30 // 30 –¥–Ω–µ–π
    })

    // console.log('üç™ Cookie set: user_token =', token.substring(0, 20) + '...')

    return {
      success: true,
      message: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      user: {
        id: user.id,
        phone: user.phone,
        name: user.name,
        email: user.email,
        createdAt: user.createdAt.toISOString()
      }
    }

  } catch (error: any) {
    console.error('Login API error:', error)
    
    if (error.statusCode) {
      throw error
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})