import { codeService } from '~~/server/services/users/codeService'
import { loginService } from '~~/server/services/users/loginService'
import { authSchemas } from '~~/shared/validation/schemas'
import { validateBody, createValidationError, ValidationErrors } from '~~/server/utils/validation'

export default defineEventHandler(async (event) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validationResult = await validateBody(event, authSchemas.login)

    if (!validationResult.success) {
      throw createValidationError(validationResult)
    }
    
    const { phone, code } = validationResult.data!

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ codeService
    const isCodeValid = await codeService.verify(phone, code)
    
    if (!isCodeValid) {
      throw createError({
        statusCode: 400,
        statusMessage: ValidationErrors.CODE_INVALID
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ loginService
    const { user, token } = await loginService.getOrCreateUser(phone)

    if (!user) {
      throw createError({
        statusCode: 500,
        statusMessage: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
      })
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    setCookie(event, 'user_token', token, {
      httpOnly: true,
      secure: true,
      sameSite: 'strict',
      maxAge: 60 * 60 * 24 * 30 // 30 –¥–Ω–µ–π
    })

    // console.log('üç™ Cookie set: user_token =', token.substring(0, 20) + '...')

    return {
      success: true,
      message: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      user: {
        id: user.id,
        phone: user.phone,
        name: user.name,
        email: user.email,
        createdAt: user.createdAt.toISOString()
      }
    }

  } catch (error: any) {
    console.error('Login API error:', error)
    
    if (error.statusCode) {
      throw error
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    })
  }
})