import { getUserById } from '../../repositories/user.repository'
import type { User, PublicUser } from '~/app/types/auth'
import jwt from 'jsonwebtoken'

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 */
export const getUserByToken = async (token: string): Promise<PublicUser | null> => {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, JWT_SECRET) as { id: number, role: string, phone: string }
    
    // console.log('üîç JWT decoded:', { id: decoded.id, role: decoded.role, phone: decoded.phone })
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await getUserById(decoded.id)
    
    if (!user || !user.isActive) {
      // console.log('‚ùå User not found or inactive:', decoded.id)
      return null
    }
    
    // console.log('‚úÖ User found in DB:', user.phone)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      id: user.id,
      phone: user.phone,
      name: user.name,
      email: user.email,
      createdAt: user.createdAt.toISOString()
    }
  } catch (error) {
    // console.error('Error getting user by token:', error)
    return null
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—É–±–ª–∏—á–Ω–æ–≥–æ
 */
export const toPublicUser = (user: User): PublicUser => {
  return {
    id: user.id,
    phone: user.phone,
    name: user.name,
    email: user.email,
    createdAt: user.createdAt.toISOString()
  }
}